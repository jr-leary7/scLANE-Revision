---
title: "Supplementary Figure 5"
subtitle: "Bacher Group"
date: today
date-format: long
author:
  - name: Jack R. Leary
    orcid: 0009-0004-8821-3269
    email: j.leary@ufl.edu
    corresponding: true
    affiliation: 
      - name: University of Florida
        department: Department of Biostatistics
        city: Gainesville
        state: FL
        country: US
format:
  html: 
    theme: journal
    highlight-style: tango
    toc: true
    toc-depth: 2
    toc-location: left
    code-copy: hover
    code-tools: true
    code-fold: show
    embed-resources: true
    number-sections: true
    fig-width: 6
    fig-height: 4
    fig-dpi: 320
    fig-align: center
    fig-cap-location: bottom
    tbl-cap-location: bottom
editor: source
---

```{r setup}
#| include: false
knitr::opts_chunk$set(comment = NA)
reticulate::use_condaenv("../../../../py_envs/scLANE_env2/", required = TRUE)
set.seed(312)  # lucky seed
```

# Libraries {#sec-libs}

We begin by loading the prerequisite libraries needed to make our plots. 

```{r}
#| message: false
#| warning: false
library(dplyr)       # data manipulation
library(Seurat)      # scRNA-seq tools
library(scLANE)      # trajectory DE
library(Lamian)      # more trajectory DE
library(ggplot2)     # pretty plots
library(biomaRt)     # gene annotation
library(tradeSeq)    # even more trajectory DE
library(patchwork)   # plot alignment
rename <- dplyr::rename
select <- dplyr::select
```

# Visualization tools {#sec-viz-tools}

First we define a `ggplot` guide that will make our legends cleaner and easier to read. 

```{r}
guide_umap <- function(key.size = 4) {
  ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = key.size, 
                                                                    alpha = 1, 
                                                                    stroke = 1)))
}
```

Next we define consistent color palettes to be used throughout. 

```{r}
palette_heatmap <- paletteer::paletteer_d("MetBrewer::Hiroshige", direction = -1)
palette_cluster <- paletteer::paletteer_d("ggsci::default_locuszoom")
palette_celltype <- paletteer::paletteer_d("ggsci::default_igv")
palette_models <- paletteer::paletteer_d("ggsci::nrc_npg")[c(1, 3:4)]
names(palette_models) <- c("scLANE", "tradeSeq", "Lamian")
```

# Helper functions {#sec-fns}

```{r}
#| code-fold: true
get_pop_fit_Lamian <- function(lamian.res = NULL) {
  # check inputs 
  if (is.null(lamian.res)) { stop("lamian.res must be non-NULL.") }
  
  # get predicted values from GAMs per-gene
  design <- lamian.res$design
  design <- design[, 1, drop = FALSE]
  knotnum <- lamian.res$knotnum
  pt_vec <- lamian.res$pseudotime
  pt_vec <- pt_vec[order(pt_vec)]
  gene <- rownames(lamian.res$statistics)
  fit_list <- purrr::map(gene, function(g) {
    tmp <- matrix(lamian.res$parameter[[g]]$beta, ncol = knotnum[g] + 4)
    beta <- as.vector(tmp[1, ])
    x <- purrr::map(rownames(design), function(i) {
      kronecker(diag(knotnum[g] + 4), design[i, , drop = FALSE])
    })
    if (knotnum[g] == 0) {
      phi <- splines::bs(pt_vec, intercept = TRUE)
    } else {
      knots <- seq(min(pt_vec), max(pt_vec), length.out = knotnum[g] + 2)[2:(knotnum[g] + 1)]
      phi <- splines::bs(pt_vec, knots = knots, intercept = TRUE)
    }
    i <- x[[1]]
    if (ncol(phi) == nrow(i)) {
      fit <- phi %*% i %*% beta
    } else {
      fit <- phi %*% t(i) %*% beta
    }
    fit_df <- data.frame(fit_link = as.numeric(fit))
    rownames(fit_df) <- rownames(fit)
    return(fit_df)
  })
  names(fit_list) <- gene
  return(fit_list)
}

get_preds_Lamian <- function(lamian.res = NULL) {
  # check inputs 
  if (is.null(lamian.res)) { stop("lamian.res must be non-NULL.") }
  
  # run 
  expr <- lamian.res$expr
  design <- lamian.res$design
  cellanno <- lamian.res$cellanno
  knotnum <- lamian.res$knotnum
  pt_vec <- lamian.res$pseudotime[colnames(expr)]
  gene <- rownames(expr)
  
  phi_list <- purrr::map(sort(unique(knotnum)), function(k) {
    if (k == 0) {
      phi <- splines::bs(pt_vec, intercept = TRUE)
    } else {
      knots <- seq(min(pt_vec), max(pt_vec), length.out = k + 2)[2:(k + 1)]
      phi <- splines::bs(pt_vec, knots = knots, intercept = TRUE)
    }
  })
  names(phi_list) <- as.character(sort(unique(knotnum)))
  
  sname <- purrr::map(rownames(design), function(i) {
    cellanno[cellanno[, 2] == i, 1]
  })
  names(sname) <- rownames(design)
  
  k <- unique(knotnum)[2]
  pred <- purrr::map(unique(knotnum), function(k) {
    genesub <- names(knotnum)[knotnum == k]
    B <- purrr::map(genesub, function(g) {
      lamian.res$parameter[[g]]$beta
    })
    B <- purrr::reduce(B, rbind)
    if (length(genesub) == 1) {
      B <- matrix(B, nrow = 1)
    }
    rownames(B) <- genesub
    
    omega <- purrr::map(genesub, function(g) {
      lamian.res$parameter[[g]]$omega
    }) %>% 
      purrr::reduce(rbind)
    if (length(genesub) == 1) {
      omega <- matrix(omega, nrow = 1)
    }
    rownames(omega) <- genesub
    
    phi <- phi_list[[as.character(k)]]
    phi <- purrr::map(rownames(design), function(ss) {
      phi[sname[[ss]], ]
    })
    names(phi) <- rownames(design)
    
    xs <- purrr::map(rownames(design), function(i) {
      kronecker(diag(k + 4), design[i, 1, drop = FALSE])
    })
    names(xs) <- rownames(design)
    
    phi_phi <- purrr::map(rownames(design), function(s) {
      t(phi[[s]]) %*% phi[[s]]
    })
    names(phi_phi) <- rownames(design)
    
    phiX <- purrr::map(rownames(design), function(s) {
      phi[[s]] %*% t(xs[[s]])
    })
    names(phiX) <- rownames(design)
    
    s <- rownames(design)[1]
    predtmp <- purrr::map(rownames(design), function(s) {
      sexpr <- expr[genesub, , drop = FALSE]
      sexpr_phibx <- sexpr[genesub, cellanno[, 2] == s, drop = FALSE] - (B[genesub, ] %*% t(phiX[[s]]))
      nb <- k + 4
      oinv <- purrr::map(genesub, function(g) {
        chol2inv(chol(matrix(omega[g, , drop = FALSE], nrow = nb)))
      })
      names(oinv) <- genesub
      Jchol <- purrr::map(genesub, function(g) {
        chol(phi_phi[[s]] + oinv[[g]])
      })
      names(Jchol) <- genesub
      Jsolve <- purrr::map(genesub, function(g) {
        as.numeric(chol2inv(Jchol[[g]]))
      }) %>% 
        purrr::reduce(cbind)
      if (length(genesub) == 1) {
        Jsolve <- matrix(Jsolve, ncol = 1)
      }
      colnames(Jsolve) <- genesub
      
      K <- tcrossprod(t(phi[[s]]), sexpr_phibx)
      JK <- rowsum((Jsolve * K[rep(seq_len(nb), nb), , drop = FALSE]), rep(seq_len(nb), each =  nb)) 
      res <- t(phi[[s]] %*% JK)
      return(res)
    })
    predtmp <- purrr::reduce(predtmp, cbind)
  })
  pred <- purrr::reduce(pred, rbind)
  pred <- pred[gene, colnames(expr), drop = FALSE]
  populationFit <- t(get_pop_fit_Lamian(lamian.res = lamian.res) %>% purrr::reduce(cbind))
  pred_res <- pred + populationFit
  return(pred_res)
}

compute_resp_preds_Lamian <- function(lamian.preds, cell.offset) {
  # check inputs 
  if (is.null(lamian.preds) || is.null(cell.offset)) { stop("Inputs must be non-NULL.") }
  
  # compute fitted values on response scale (raw counts)
  pred_res_resp <- purrr::map(seq(nrow(lamian.preds)), function(r) {
    fitted_vals <- lamian.preds[r, , drop = FALSE]
    fitted_vals_resp <- t(t(2^(fitted_vals) - 1) * cell.offset)
    return(fitted_vals_resp)
  }) 
  pred_res_resp <- purrr::reduce(pred_res_resp, rbind)
  rownames(pred_res_resp) <- rownames(lamian.preds)
  return(pred_res_resp)
}

tradeSeqFit <- function(ts.models = NULL, 
                        genes = NULL, 
                        cell.offset = NULL, 
                        pt.vec = NULL, 
                        expr.mat = NULL, 
                        cell.metadata = NULL) {
  ts_pred_list <- purrr::map(seq(ts.models[genes]), \(g) {
    pred_df <- as.data.frame(predict(ts.models[[genes[g]]])) %>% 
               magrittr::set_colnames(c("tradeSeq_pred_link")) %>% 
               dplyr::mutate(cell = colnames(expr.mat), 
                             gene = genes[g], 
                             .before = 1) %>% 
               dplyr::mutate(tradeSeq_pred = exp(tradeSeq_pred_link) * cell.offset, 
                             tradeSeq_pred_log1p = log1p(tradeSeq_pred), 
                             rna = as.numeric(expr.mat@assays$RNA$counts[genes[g], ]) * cell_offset, 
                             rna_log1p = log1p(rna), 
                             pt = pt.vec) %>% 
               dplyr::bind_cols(cell.metadata) %>% 
               magrittr::set_rownames(.$cell)
    return(pred_df)
  })
  ts_pred_df <- purrr::reduce(ts_pred_list, rbind) %>% 
                dplyr::mutate(gene = factor(gene, levels = genes))
  return(ts_pred_df)
}
```

# Data {#sec-data}

## Preprocessed objects

We read in our processed `Seurat` object, and create some objects that we'll need to use `scLANE`, along with some tables we'll use throughout our various plots. 

```{r}
seu_bcell <- readRDS("../../data/bcell/seu_bcell.Rds")
cell_offset <- createCellOffset(seu_bcell)
pt_df <- data.frame(DPT = seu_bcell$dpt_pseudotime)
embed_df <- data.frame(cell = seu_bcell$cell, 
                       celltype = seu_bcell$celltype, 
                       leiden = seu_bcell$leiden, 
                       dc1 = seu_bcell@reductions$diffmap@cell.embeddings[, 1], 
                       dc2 = seu_bcell@reductions$diffmap@cell.embeddings[, 2], 
                       dpt = seu_bcell$dpt_pseudotime)
```

We read in the fitted models from `scLANE` that we generated earlier. We then produce a tidy table of DE statistics, and identify a set of trajectory DE genes. 

```{r}
scLANE_models <- readRDS("../../data/bcell/scLANE_models.Rds")
scLANE_de_res <- getResultsDE(scLANE_models)
dyn_genes <- filter(scLANE_de_res, Gene_Dynamic_Overall == 1) %>% 
             pull(Gene)
seu_bcell_sort <- sortObservations(seu_bcell, 
                                   pt = seu_bcell$dpt_pseudotime, 
                                   id.vec = seu_bcell$fetal.ids)
cell_offset_sort <- createCellOffset(seu_bcell_sort)
pt_df_sort <- data.frame(DPT = seu_bcell_sort$dpt_pseudotime)
embed_df_sort <- data.frame(cell = seu_bcell_sort$cell, 
                            celltype = seu_bcell_sort$celltype, 
                            leiden = seu_bcell_sort$leiden, 
                            dc1 = seu_bcell_sort@reductions$DIFFMAP@cell.embeddings[, 1], 
                            dc2 = seu_bcell_sort@reductions$DIFFMAP@cell.embeddings[, 2], 
                            dpt = seu_bcell_sort$dpt_pseudotime)
```

Next we read in the fitted models from `tradeSeq`. 

```{r}
ts_models <- readRDS("../../data/bcell/ts_models.Rds")
ts_de_res <- associationTest(ts_models, global = TRUE) %>% 
                             arrange(desc(waldStat)) %>% 
                             mutate(gene = rownames(.), 
                                    pvalue_adj = p.adjust(pvalue, method = "fdr"), 
                                    gene_dynamic_overall = if_else(pvalue_adj < 0.01, 1, 0)) %>% 
                             relocate(gene)
dyn_genes_ts <- filter(ts_de_res, gene_dynamic_overall == 1) %>% 
                pull(gene)
```

Lastly we import the fitted models from `Lamian`. 

```{r}
lamian_models <- readRDS("../../data/bcell/lamian_models.Rds")
lamian_models$populationFit <- getPopulationFit(lamian_models)
lamian_models$fitted_values_link <- get_preds_Lamian(lamian_models)
lamian_models$fitted_values_resp <- compute_resp_preds_Lamian(lamian_models$fitted_values_link, cell.offset = cell_offset)
lamian_de_res <- rename(lamian_models$statistics, 
                        pvalue = pval.overall, 
                        Zstat = z.overall) %>% 
                 arrange(desc(Zstat)) %>% 
                 mutate(pvalue_adj = p.adjust(pvalue, method = "fdr")) %>% 
                 mutate(gene = rownames(.), 
                        gene_dynamic_overall = if_else(pvalue_adj < 0.01, 1, 0)) %>% 
                 select(gene, 
                        Zstat, 
                        pvalue,
                        pvalue_adj, 
                        gene_dynamic_overall)
dyn_genes_lamian <- filter(lamian_de_res, gene_dynamic_overall == 1) %>% 
                    pull(gene)
```

# Supplementary Figure 5 {#sec-fig5}

## A

```{r}
#| fig-width: 7.3
#| fig-height: 2.75
non_sclANE_dyn_genes <- unique(c(dyn_genes_ts, dyn_genes_lamian))[!unique(c(dyn_genes_ts, dyn_genes_lamian)) %in% dyn_genes]
non_sclANE_dyn_genes_top4 <- filter(scLANE_de_res, Gene %in% non_sclANE_dyn_genes) %>%
                             slice_head(n = 4) %>%
                             pull(Gene)
S_Fig_5A <- tradeSeqFit(ts_models, 
                        genes = non_sclANE_dyn_genes_top4, 
                        cell.offset = cell_offset, 
                        pt.vec = seu_bcell$dpt_pseudotime, 
                        expr.mat = seu_bcell, 
                        cell.metadata = select(seu_bcell@meta.data, celltype)) %>% 
            select(cell, 
                   pt, 
                   celltype, 
                   gene, 
                   rna_log1p, 
                   pred_log1p = tradeSeq_pred_log1p) %>% 
            ggplot(aes(x = pt, y = rna_log1p)) + 
            facet_wrap(~gene, ncol = 4) + 
            geom_point(aes(color = celltype), 
                       size = 1.25, 
                       stroke = 0, 
                       alpha = 0.5) + 
            geom_line(aes(y = pred_log1p), 
                      linewidth = 0.75, 
                      color = "black") + 
            scale_color_manual(values = palette_celltype) + 
            labs(x = "Pseudotime", y = "Normalized Expression") + 
            theme_scLANE(base.size = 9) + 
            theme(legend.title = element_blank(), 
                  strip.text.x = element_text(face = "italic")) + 
            guide_umap()
S_Fig_5A
```

```{r}
ggsave("Suppl_Figure_5A.png",
       plot = S_Fig_5A, 
       device = "png", 
       path = "../png/",
       width = 7.3, 
       height = 2.75, 
       units = "in", 
       dpi = 320)
```

## B

```{r}
#| fig-width: 3
#| fig-height: 2.5
smoothed_counts <- smoothedCountsMatrix(scLANE_models, 
                                        pt = pt_df_sort, 
                                        genes = dyn_genes, 
                                        size.factor.offset = cell_offset_sort,
                                        log1p.norm = TRUE)
gene_embed <- embedGenes(smoothed_counts$Lineage_A, resolution.param = 0.2) %>% 
              mutate(leiden = as.factor(as.integer(leiden)))
S_Fig_5B <- ggplot(gene_embed, aes(x = umap1, y = umap2)) + 
            geom_point(aes(color = leiden), 
                       size = 1.25, 
                       stroke = 0, 
                       alpha = 0.5) + 
            scale_color_manual(values = paletteer::paletteer_d("MetBrewer::Egypt")) + 
            labs(x = "UMAP 1", 
                 y = "UMAP 2", 
                 color = "Gene Cluster") + 
            theme_scLANE(base.size = 9, umap = TRUE) + 
            guide_umap()
S_Fig_5B
```

```{r}
ggsave("Suppl_Figure_5B.png",
       plot = S_Fig_5B, 
       device = "png", 
       path = "../png/",
       width = 3, 
       height = 2.5, 
       units = "in", 
       dpi = 320)
```

## C

```{r}
#| fig-width: 4.3
#| fig-height: 2.5
gene_clust_list <- purrr::map(unique(gene_embed$leiden), \(x) { 
  filter(gene_embed, leiden == x) %>% 
  inner_join(scLANE_de_res, by = c("gene" = "Gene")) %>% 
  arrange(desc(Test_Stat)) %>% 
  pull(gene)
}) 
names(gene_clust_list) <- paste0("Leiden_", unique(gene_embed$leiden))
enrich_res <- gprofiler2::gost(gene_clust_list, 
                               organism = "hsapiens", 
                               ordered_query = TRUE, 
                               multi_query = FALSE, 
                               sources = "GO:BP")$result
View(with_groups(enrich_res, query, slice_head, n = 15))
seu_bcell_sort <- geneProgramScoring(seu_bcell_sort, 
                                     genes = gene_embed$gene, 
                                     gene.clusters = gene_embed$leiden, 
                                     n.cores = 3L)
S_Fig_5C <- mutate(embed_df_sort, 
                   cluster_1 = seu_bcell_sort$cluster_1, 
                   cluster_2 = seu_bcell_sort$cluster_2, 
                   cluster_3 = seu_bcell_sort$cluster_3, 
                   cluster_4 = seu_bcell_sort$cluster_4) %>% 
            tidyr::pivot_longer(cols = starts_with("cluster_"), 
                                names_to = "program", 
                                values_to = "program_score") %>% 
            mutate(program_label = case_when(program == "cluster_1" ~ "Ribosome Biogenesis", 
                                             program == "cluster_2" ~ "Cell Cycle", 
                                             program == "cluster_3" ~ "B-cell Activation", 
                                             program == "cluster_4" ~ "Differentiation", 
                                             TRUE ~ NA_character_)) %>% 
            ggplot(aes(x = dc1, y = dc2)) +
            facet_wrap(~program_label, 
                       ncol = 2, 
                       nrow = 2) +
            geom_point(aes(color = program_score), 
                       size = 1.25, 
                       stroke = 0, 
                       alpha = 0.5) +
            scale_color_gradientn(colors = palette_heatmap) +
            labs(x = "DC 1",
                 y = "DC 2", 
                 color = "Program Score") + 
            theme_scLANE(base.size = 9, umap = TRUE)
S_Fig_5C
```


```{r}
ggsave("Suppl_Figure_5C.png",
       plot = S_Fig_5C, 
       device = "png", 
       path = "../png/",
       width = 4.3, 
       height = 2.5, 
       units = "in", 
       dpi = 320)
```

## D 

```{r}
#| fig-width: 7.3
#| fig-height: 4
S_Fig_5D <- getFittedValues(scLANE_models, 
                            genes = gene_clust_list[[3]][1:12],
                            pt = pt_df_sort, 
                            expr.mat = seu_bcell_sort, 
                            size.factor.offset = cell_offset_sort, 
                            cell.meta.data = select(seu_bcell_sort@meta.data, celltype), 
                            id.vec = seu_bcell_sort$fetal.ids) %>% 
            ggplot(aes(x = pt, y = rna_log1p)) +
            facet_wrap(~gene, 
                       ncol = 4, 
                       nrow = 3) + 
            geom_point(aes(color = celltype), 
                       size = 1.25, 
                       stroke = 0, 
                       alpha = 0.5) + 
            #geom_ribbon(aes(ymin = log1p(scLANE_ci_ll / size_factor), ymax = log1p(scLANE_ci_ul / size_factor)), 
            #            fill = "grey50", 
            #            linewidth = 0, 
            #            alpha = 0.7) + 
            geom_line(aes(y = log1p(scLANE_pred / size_factor)), 
                      color = "black", 
                      linewidth = 0.75) + 
            scale_color_manual(values = palette_celltype) + 
            labs(x = "Pseudotime", y = "Normalized Expression") + 
            theme_scLANE(base.size = 9) + 
            theme(legend.title = element_blank(), 
                  strip.text.x = element_text(face = "italic")) + 
            guide_umap()
S_Fig_5D
```

```{r}
ggsave("Suppl_Figure_5D.png",
       plot = S_Fig_5D, 
       device = "png", 
       path = "../png/",
       width = 7.3, 
       height = 4, 
       units = "in", 
       dpi = 320)
```

# Supplemental table 5 {#sec-suppl-table5}

```{r}
non_lamian_genes <- filter(scLANE_de_res, 
                           Gene_Dynamic_Overall == 1, 
                           !Gene %in% dyn_genes_lamian) %>% 
                    pull(Gene)
non_lamian_enrich_res <- gprofiler2::gost(non_lamian_genes, 
                                          organism = "hsapiens", 
                                          ordered_query = TRUE, 
                                          multi_query = FALSE, 
                                          sources = "GO:BP")$result %>% 
                         filter(p_value < 0.01)
suppl_table5 <- select(non_lamian_enrich_res, term_id, term_name, p_value) %>% 
                slice_head(n = 20)
readr::write_csv(suppl_table5, 
                 file = "../../tables/Suppl_Table5.csv", 
                 col_names = TRUE)
```

# Session info {#sec-SI}

```{r}
sessioninfo::session_info()
```
